task projectDependencyGraph {
  doLast {
    def dot = new File(rootProject.buildDir, 'reports/dependency-graph/project.dot')
    dot.parentFile.mkdirs()
    dot.delete()

    dot << 'digraph {\n'
    dot << "  graph [label=\"${rootProject.name}\\n \",labelloc=t,fontsize=30,ranksep=1.4];\n"
    dot << '  node [style=filled, fillcolor="#bbbbbb"];\n'
    dot << '  rankdir=TB;\n'

    def rootProjects = []
    def queue = [rootProject]
    while (!queue.isEmpty()) {
      def project = queue.remove(0)
      rootProjects.add(project)
      queue.addAll(project.childProjects.values())
    }

    def projects = new LinkedHashSet<Project>()
    def dependencies = new LinkedHashMap<Tuple2<Project, Project>, List<String>>()

    queue = [rootProject]
    while (!queue.isEmpty()) {
      def project = queue.remove(0)
      queue.addAll(project.childProjects.values())

      project.configurations.all { config ->
        config.dependencies
                .withType(ProjectDependency)
                .collect { it.dependencyProject }
                .each { dependency ->
                  projects.add(project)
                  projects.add(dependency)
                  rootProjects.remove(dependency)

                  def graphKey = new Tuple2<Project, Project>(project, dependency)
                  def traits = dependencies.computeIfAbsent(graphKey) { new ArrayList<String>() }

                  if (config.name.toLowerCase().endsWith('implementation')) {
                    traits.add('style=dotted')
                  }
                }
      }
    }

    projects = projects.sort { it.path }

    dot << '\n  # Projects\n\n'
    for (project in projects) {
      def traits = []

      if (rootProjects.contains(project)) {
        traits.add('shape=box')
      }

      traits.add('fillcolor="#ffd2b3"')

      if (rootProjects.contains(project)) {
        dot << "  \":app\" [${traits.join(", ")}];\n"
      } else {
        dot << "  \"${project.path}\" [${traits.join(", ")}];\n"
      }
    }

    dot << '\n  {rank = same;'
    for (project in projects) {
      if (rootProjects.contains(project)) {
        dot << " \":app\";"
      }
    }
    dot << '}\n'

    dot << '\n  # Dependencies\n\n'
    dependencies.forEach { key, traits ->
      if (key.first.path == rootProject.path) {
        dot << "  \":app\" -> \"${key.second.path}\""
      } else {
        dot << "  \"${key.first.path}\" -> \"${key.second.path}\""
      }
      if (!traits.isEmpty()) {
        dot << " [${traits.join(", ")}]"
      }
      dot << '\n'
    }

    dot << '}\n'

    def p = 'dot -Tpng -O project.dot'.execute([], dot.parentFile)
    p.waitFor()
    if (p.exitValue() != 0) {
      throw new RuntimeException(p.errorStream.text)
    }

    println("Project module dependency graph created at ${dot.absolutePath}.png")
  }
}
